#!/usr/bin/perl -w
use strict;
use Config::Tiny;
use DBI;
use Date::Manip::Date;
use CGI;
use JSON;
use File::Basename;

my $cgi = CGI->new;

my $home = $ENV{HOME} || "";
my $config = Config::Tiny->read("${home}/.coin-tax");
if (!defined $config) {
  my $dirname = dirname(__FILE__);
  $config = Config::Tiny->read("$dirname/.coin-tax");
}
if (!defined $config) {
  exit_error("${home}/.coin-tax: not found");
}
my $dbname = $config->{Coinlib}->{db} or exit_error("db not configured");
$dbname =~ s/~/${home}/;

my $dbh = DBI->connect($dbname) or exit_error("$dbname: cannot connect");
my $select_coin = $dbh->prepare("WITH c AS (SELECT * FROM coins WHERE symbol = ? AND currency = ?), dates AS (SELECT ? as sel_date) SELECT * FROM c WHERE date = (SELECT max(date) FROM c AS c2 WHERE c2.date <= (SELECT sel_date FROM dates) AND c2.date > (SELECT datetime(sel_date, '-6 hours') FROM dates))") or exit_error("select_coin prepare failed");
my $select_markets = $dbh->prepare("SELECT * FROM markets WHERE coin_symbol = ? AND currency = ? AND date = ?") or exit_error("select_markets prepare failed");
my $select_exchanges = $dbh->prepare("SELECT * FROM exchanges WHERE coin_symbol = ? AND currency = ? AND date = ?") or exit_error("select_exchanges prepare failed");

my $json = JSON->new->utf8;

my $q_date = $cgi->param("date") || "now";
my $date = Date::Manip::Date->new($q_date)->printf("%O%z");
$date =~ s/([-+]\d\d)(\d\d)$/$1:$2/; # SQLite requires a very specific timezone format

my $q_symbol = $cgi->param("symbol") || "BTC";
my $q_currency = $cgi->param("currency") || "EUR";
$select_coin->execute($q_symbol, $q_currency, $date) or exit_error("select_coin failed");
my ($row, $market, $exchange);
if (defined($row = $select_coin->fetchrow_hashref)) {
  if ($cgi->param("details")) {
    $select_markets->execute($row->{symbol}, $row->{currency}, $row->{date}) or exit_error("select_markets failed");
    while (defined($market = $select_markets->fetchrow_hashref)) {
      $row->{markets}->{$market->{symbol}} = { "volume_24h" => $market->{volume_24h}, "price" => $market->{price} };
    }
    $select_exchanges->execute($row->{symbol}, $row->{currency}, $row->{date}) or exit_error("select_exchanges failed");
    while (defined($exchange = $select_exchanges->fetchrow_hashref)) {
      $row->{markets}->{$exchange->{symbol}}->{exchanges}->{$exchange->{name}} = { "volume_24h" => $exchange->{volume_24h}, "price" => $exchange->{price} };
    }
  }

  print $cgi->header('application/json; charset=UTF-8');
  print $json->encode($row);
} else {
  print $cgi->header('application/json');
  print "{}\n";
}
exit 0;

sub exit_error {
  my $msg = shift;

  print $cgi->header(-Status => 500);
  print "$msg\n";
  exit 0;
}

